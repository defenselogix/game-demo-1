// FishTankEnvironment.jsx  –– rebuild tank with four thin glass walls and floor
import { jsxDEV as _jsxDEV } from "react/jsx-dev-runtime";
import React, { useMemo } from 'react'; // Removed unused useState, useEffect
import * as THREE from 'three';
import { RigidBody, CuboidCollider, TrimeshCollider } from '@react-three/rapier'; // Import physics components
import WaterSurface from './WaterSurface.js'; // Import the WaterSurface component
// Removed invalid import: import Seabed from 'Seabed';
import { TankGroup } from './envMeshes.js'; // Import the TankGroup function
import SeaweedField from './SeaweedField.js'; // Import the SeaweedField component
import { TANK_DIMENSIONS } from './utilsTankConstants.js'; // Import TANK_DIMENSIONS only
var WALL_THICKNESS = TANK_DIMENSIONS.wallThickness || 0.1; // Use constant, fallback if needed
var TANK_HEIGHT = TANK_DIMENSIONS.height || 1.0; // Use constant for height, adjust default if needed
var RIM_CLEARANCE = 1.9; // Raise rim significantly above water plane (1.9 units)
// Removed WATER_SIZE, use innerWidth/innerDepth directly
var WATER_LEVEL = TANK_DIMENSIONS.maxY; // Use the top Y level from constants
export default function FishTankEnvironment(param) {
    var _this = this;
    var children = param.children, seabedRef = param.seabedRef, seaweedClusters = param.seaweedClusters, seaweedSpread = param.seaweedSpread;
    // Memoize the tank meshes (seabed, rocks, etc.) generated by TankGroup
    var tankMeshes = useMemo(function() {
        return TankGroup();
    }, []);
    // --- Generate Mound Colliders Directly During Render ---
    var moundColliders = useMemo(function() {
        if (!tankMeshes) return []; // Guard clause
        return tankMeshes.children.filter(function(child) {
            return child.isMesh && child.name === 'SandMound';
        }).map(function(child, index) {
            // Clone geometry to avoid issues if original is modified later
            var geometry = child.geometry.clone();
            // Check if geometry is valid for TrimeshCollider
            if (!geometry.attributes.position || !geometry.index) {
                console.warn("SandMound ".concat(index, " has invalid geometry for TrimeshCollider."));
                return null; // Skip invalid geometry
            }
            return /*#__PURE__*/ _jsxDEV(RigidBody, {
                type: "fixed",
                position: child.position.clone(),
                rotation: child.rotation.clone(),
                scale: child.scale.clone(),
                userData: {
                    type: 'sandMound'
                },
                colliders: false,
                children: /*#__PURE__*/ _jsxDEV(TrimeshCollider, {
                    args: [
                        geometry.attributes.position.array,
                        geometry.index.array
                    ]
                }, void 0, false, {
                    fileName: "FishTankEnvironment.js",
                    lineNumber: 42,
                    columnNumber: 25
                }, _this)
            }, "mound-collider-".concat(index), false, {
                fileName: "FishTankEnvironment.js",
                lineNumber: 32,
                columnNumber: 21
            }, _this);
        }).filter(Boolean); // Remove null entries from skipped invalid geometry
    }, [
        tankMeshes
    ]); // Recalculate only if tankMeshes changes
    // No need to memoize geometry if used directly in colliders/meshes
    // const wallGeoFrontBack = useMemo( ... );
    // const wallGeoSides = useMemo( ... );
    // Calculate collider dimensions once using INNER dimensions where appropriate
    var halfWidth = TANK_DIMENSIONS.innerWidth / 2; // Use inner width for water/content
    var halfHeight = TANK_HEIGHT / 2;
    var halfDepth = TANK_DIMENSIONS.innerDepth / 2; // Use inner depth for water/content
    var halfWallThickness = WALL_THICKNESS / 2;
    // Dimensions for outer colliders based on TANK_DIMENSIONS.width/depth
    var outerHalfWidth = TANK_DIMENSIONS.width / 2;
    var outerHalfDepth = TANK_DIMENSIONS.depth / 2;
    // Removed redundant glassMat definition
    // Removed floorMat as Seabed component handles its own material
    // Calculate tank's vertical center position based on tank height and bottom Y
    // Note: TANK_DIMENSIONS.minY is likely negative, so adding half height moves center up
    var yPos = TANK_DIMENSIONS.minY + halfHeight;
    // User data to identify boundaries in collision checks
    var boundaryUserData = {
        type: 'tankBoundary'
    };
    // Floor Y Position (bottom face of the tank) - center of the floor collider
    var floorYPos = TANK_DIMENSIONS.minY + halfWallThickness;
    return /*#__PURE__*/ _jsxDEV("group", {
        name: "fish-tank-environment",
        children: [
            /*#__PURE__*/ _jsxDEV("primitive", {
                object: tankMeshes
            }, void 0, false, {
                fileName: "FishTankEnvironment.js",
                lineNumber: 72,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDEV(RigidBody, {
                type: "fixed",
                position: [
                    0,
                    yPos,
                    -outerHalfDepth + halfWallThickness
                ],
                userData: boundaryUserData,
                children: /*#__PURE__*/ _jsxDEV(CuboidCollider, {
                    args: [
                        outerHalfWidth,
                        halfHeight,
                        halfWallThickness
                    ]
                }, void 0, false, {
                    fileName: "FishTankEnvironment.js",
                    lineNumber: 75,
                    columnNumber: 9
                }, this)
            }, void 0, false, {
                fileName: "FishTankEnvironment.js",
                lineNumber: 74,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDEV(RigidBody, {
                type: "fixed",
                position: [
                    0,
                    yPos,
                    outerHalfDepth - halfWallThickness
                ],
                userData: boundaryUserData,
                children: /*#__PURE__*/ _jsxDEV(CuboidCollider, {
                    args: [
                        outerHalfWidth,
                        halfHeight,
                        halfWallThickness
                    ]
                }, void 0, false, {
                    fileName: "FishTankEnvironment.js",
                    lineNumber: 78,
                    columnNumber: 9
                }, this)
            }, void 0, false, {
                fileName: "FishTankEnvironment.js",
                lineNumber: 77,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDEV(RigidBody, {
                type: "fixed",
                position: [
                    -outerHalfWidth + halfWallThickness,
                    yPos,
                    0
                ],
                userData: boundaryUserData,
                children: /*#__PURE__*/ _jsxDEV(CuboidCollider, {
                    args: [
                        halfWallThickness,
                        halfHeight,
                        outerHalfDepth
                    ]
                }, void 0, false, {
                    fileName: "FishTankEnvironment.js",
                    lineNumber: 81,
                    columnNumber: 9
                }, this)
            }, void 0, false, {
                fileName: "FishTankEnvironment.js",
                lineNumber: 80,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDEV(RigidBody, {
                type: "fixed",
                position: [
                    outerHalfWidth - halfWallThickness,
                    yPos,
                    0
                ],
                userData: boundaryUserData,
                children: /*#__PURE__*/ _jsxDEV(CuboidCollider, {
                    args: [
                        halfWallThickness,
                        halfHeight,
                        outerHalfDepth
                    ]
                }, void 0, false, {
                    fileName: "FishTankEnvironment.js",
                    lineNumber: 84,
                    columnNumber: 9
                }, this)
            }, void 0, false, {
                fileName: "FishTankEnvironment.js",
                lineNumber: 83,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDEV(RigidBody, {
                type: "fixed",
                position: [
                    0,
                    floorYPos,
                    0
                ],
                userData: boundaryUserData,
                children: /*#__PURE__*/ _jsxDEV(CuboidCollider, {
                    args: [
                        halfWidth,
                        halfWallThickness,
                        halfDepth
                    ]
                }, void 0, false, {
                    fileName: "FishTankEnvironment.js",
                    lineNumber: 89,
                    columnNumber: 10
                }, this)
            }, void 0, false, {
                fileName: "FishTankEnvironment.js",
                lineNumber: 87,
                columnNumber: 7
            }, this),
            moundColliders,
            /*#__PURE__*/ _jsxDEV(WaterSurface, {
                size: TANK_DIMENSIONS.innerWidth,
                level: WATER_LEVEL
            }, void 0, false, {
                fileName: "FishTankEnvironment.js",
                lineNumber: 95,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDEV(SeaweedField, {
                clusters: seaweedClusters,
                spread: seaweedSpread
            }, void 0, false, {
                fileName: "FishTankEnvironment.js",
                lineNumber: 100,
                columnNumber: 7
            }, this),
            children
        ]
    }, void 0, true, {
        fileName: "FishTankEnvironment.js",
        lineNumber: 68,
        columnNumber: 5
    }, this);
}
